/*
 * (C) 2024 Catch Solve di Davide Montesin
 * License: AGPL
 */
import { DatasetCardComponent } from './DatasetCardComponent.js';
import { Loader } from './Loader.js';
import { API3 } from './api/api3.js';
import { cs_cast } from './quality.js';
export class StandardDashboardsComponent extends HTMLElement {
    sroot;
    boxContainer;
    boxes = [];
    titles = [];
    constructor() {
        super();
        this.sroot = this.attachShadow({ mode: 'open' });
        this.sroot.innerHTML = `
			<link rel="stylesheet" href="index.css">
			<div class="ProjectsElement">
				<div class="title" style="padding: 1rem">standard dashboards</div>
				<div class="searchbar">
					<input> üîç <span class="clearinput">‚úï</span>
				</div>
				<div class="container"></div>
			</div>
		`;
        this.boxContainer = cs_cast(HTMLDivElement, this.sroot.querySelector('.container'));
        this.boxContainer.textContent = ("loading ...");
        const refreshlist = () => {
            for (let b = 0; b < this.titles.length; b++)
                if (this.titles[b].toLowerCase().indexOf(input.value.toLowerCase()) >= 0)
                    this.boxes[b].style.display = 'block';
                else
                    this.boxes[b].style.display = 'none';
        };
        const input = this.sroot.querySelector('input');
        input.oninput = refreshlist;
        const clearinput = this.sroot.querySelector('.clearinput');
        clearinput.onclick = () => {
            input.value = '';
            refreshlist();
        };
    }
    async refresh() {
        this.boxes = [];
        this.titles = [];
        this.boxContainer.textContent = ('');
        const loader = new Loader();
        this.boxContainer.appendChild(loader);
        const json = await API3.list__catchsolve_noiodh__test_dataset_max_ts_vw({});
        loader.remove();
        console.log(json);
        for (let dataset of json) {
            const box = new DatasetCardComponent();
            this.boxContainer.appendChild(box);
            box.refresh(dataset);
            this.boxes.push(box);
            this.titles.push(dataset.dataset_name);
        }
    }
}
customElements.define('cs-standard-dashboards-element', StandardDashboardsComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhbmRhcmREYXNoYm9hcmRzQ29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHlwZXNjcmlwdC9TdGFuZGFyZERhc2hib2FyZHNDb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNyQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFdkMsTUFBTSxPQUFPLDJCQUE0QixTQUFRLFdBQVc7SUFFM0QsS0FBSyxDQUFBO0lBRUwsWUFBWSxDQUFDO0lBRWIsS0FBSyxHQUEyQixFQUFFLENBQUE7SUFDbEMsTUFBTSxHQUFhLEVBQUUsQ0FBQTtJQUVyQjtRQUVDLEtBQUssRUFBRSxDQUFBO1FBRVAsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUE7UUFDaEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUc7Ozs7Ozs7OztHQVN0QixDQUFBO1FBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUE7UUFFbkYsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVoRCxNQUFNLFdBQVcsR0FBRyxHQUFHLEVBQUU7WUFDeEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRTtnQkFDMUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQztvQkFDdkUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTs7b0JBRXJDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7UUFDdkMsQ0FBQyxDQUFBO1FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFFLENBQUE7UUFDaEQsS0FBSyxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUE7UUFFM0IsTUFBTSxVQUFVLEdBQXFCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBRSxDQUFBO1FBQzdFLFVBQVUsQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ3pCLEtBQUssQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFBO1lBQ2hCLFdBQVcsRUFBRSxDQUFBO1FBQ2QsQ0FBQyxDQUFBO0lBRUYsQ0FBQztJQUdELEtBQUssQ0FBQyxPQUFPO1FBRVosSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUE7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQTtRQUNoQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDckMsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsK0NBQStDLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDM0UsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDakIsS0FBSyxJQUFJLE9BQU8sSUFBSSxJQUFJLEVBQ3hCLENBQUM7WUFDQSxNQUFNLEdBQUcsR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7WUFDdkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDbEMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDdkMsQ0FBQztJQUVGLENBQUM7Q0FDRDtBQUVELGNBQWMsQ0FBQyxNQUFNLENBQUMsZ0NBQWdDLEVBQUUsMkJBQTJCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiAoQykgMjAyNCBDYXRjaCBTb2x2ZSBkaSBEYXZpZGUgTW9udGVzaW5cbiAqIExpY2Vuc2U6IEFHUExcbiAqL1xuXG5pbXBvcnQgeyBEYXRhc2V0Q2FyZENvbXBvbmVudCB9IGZyb20gJy4vRGF0YXNldENhcmRDb21wb25lbnQuanMnO1xuaW1wb3J0IHsgTG9hZGVyIH0gZnJvbSAnLi9Mb2FkZXIuanMnO1xuaW1wb3J0IHsgQVBJMyB9IGZyb20gJy4vYXBpL2FwaTMuanMnO1xuaW1wb3J0IHsgY3NfY2FzdCB9IGZyb20gJy4vcXVhbGl0eS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBTdGFuZGFyZERhc2hib2FyZHNDb21wb25lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudFxue1xuXHRzcm9vdFxuXHRcblx0Ym94Q29udGFpbmVyO1xuXHRcblx0Ym94ZXM6IERhdGFzZXRDYXJkQ29tcG9uZW50W10gPSBbXVxuXHR0aXRsZXM6IHN0cmluZ1tdID0gW11cblxuXHRjb25zdHJ1Y3RvcigpXG5cdHtcblx0XHRzdXBlcigpXG5cdFx0XG5cdFx0dGhpcy5zcm9vdCA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pXG5cdFx0dGhpcy5zcm9vdC5pbm5lckhUTUwgPSBgXG5cdFx0XHQ8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cImluZGV4LmNzc1wiPlxuXHRcdFx0PGRpdiBjbGFzcz1cIlByb2plY3RzRWxlbWVudFwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwidGl0bGVcIiBzdHlsZT1cInBhZGRpbmc6IDFyZW1cIj5zdGFuZGFyZCBkYXNoYm9hcmRzPC9kaXY+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJzZWFyY2hiYXJcIj5cblx0XHRcdFx0XHQ8aW5wdXQ+IPCflI0gPHNwYW4gY2xhc3M9XCJjbGVhcmlucHV0XCI+4pyVPC9zcGFuPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPjwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0YFxuXHRcdHRoaXMuYm94Q29udGFpbmVyID0gY3NfY2FzdChIVE1MRGl2RWxlbWVudCwgdGhpcy5zcm9vdC5xdWVyeVNlbGVjdG9yKCcuY29udGFpbmVyJykpXG5cblx0XHR0aGlzLmJveENvbnRhaW5lci50ZXh0Q29udGVudCA9IChcImxvYWRpbmcgLi4uXCIpO1xuXHRcdFxuXHRcdGNvbnN0IHJlZnJlc2hsaXN0ID0gKCkgPT4ge1xuXHRcdFx0Zm9yIChsZXQgYiA9IDA7IGIgPCB0aGlzLnRpdGxlcy5sZW5ndGg7IGIrKylcblx0XHRcdFx0aWYgKHRoaXMudGl0bGVzW2JdLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihpbnB1dC52YWx1ZS50b0xvd2VyQ2FzZSgpKSA+PSAwKVxuXHRcdFx0XHRcdHRoaXMuYm94ZXNbYl0uc3R5bGUuZGlzcGxheSA9ICdibG9jaydcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHRoaXMuYm94ZXNbYl0uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuXHRcdH1cblxuXHRcdGNvbnN0IGlucHV0ID0gdGhpcy5zcm9vdC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpIVxuXHRcdGlucHV0Lm9uaW5wdXQgPSByZWZyZXNobGlzdFxuXHRcdFxuXHRcdGNvbnN0IGNsZWFyaW5wdXQgPSA8SFRNTFNwYW5FbGVtZW50PiB0aGlzLnNyb290LnF1ZXJ5U2VsZWN0b3IoJy5jbGVhcmlucHV0JykhXG5cdFx0Y2xlYXJpbnB1dC5vbmNsaWNrID0gKCkgPT4ge1xuXHRcdFx0aW5wdXQudmFsdWUgPSAnJ1xuXHRcdFx0cmVmcmVzaGxpc3QoKVxuXHRcdH1cblx0XHRcblx0fVxuXHRcblxuXHRhc3luYyByZWZyZXNoKClcblx0e1xuXHRcdHRoaXMuYm94ZXMgPSBbXVxuXHRcdHRoaXMudGl0bGVzID0gW11cblx0XHR0aGlzLmJveENvbnRhaW5lci50ZXh0Q29udGVudCA9ICgnJyk7XG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IExvYWRlcigpO1xuXHRcdHRoaXMuYm94Q29udGFpbmVyLmFwcGVuZENoaWxkKGxvYWRlcilcblx0XHRjb25zdCBqc29uID0gYXdhaXQgQVBJMy5saXN0X19jYXRjaHNvbHZlX25vaW9kaF9fdGVzdF9kYXRhc2V0X21heF90c192dyh7fSlcblx0XHRsb2FkZXIucmVtb3ZlKCk7XG5cdFx0Y29uc29sZS5sb2coanNvbilcblx0XHRmb3IgKGxldCBkYXRhc2V0IG9mIGpzb24pXG5cdFx0e1xuXHRcdFx0Y29uc3QgYm94ID0gbmV3IERhdGFzZXRDYXJkQ29tcG9uZW50KCk7XG5cdFx0XHR0aGlzLmJveENvbnRhaW5lci5hcHBlbmRDaGlsZChib3gpXG5cdFx0XHRib3gucmVmcmVzaChkYXRhc2V0KVxuXHRcdFx0dGhpcy5ib3hlcy5wdXNoKGJveClcblx0XHRcdHRoaXMudGl0bGVzLnB1c2goZGF0YXNldC5kYXRhc2V0X25hbWUpXG5cdFx0fVxuXHRcdFxuXHR9IFxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ2NzLXN0YW5kYXJkLWRhc2hib2FyZHMtZWxlbWVudCcsIFN0YW5kYXJkRGFzaGJvYXJkc0NvbXBvbmVudCkiXX0=